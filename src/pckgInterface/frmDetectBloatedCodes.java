/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pckgInterface;

import CoreClasses.MethodDefinition;
import CoreClasses.ClassDefinition;
import CoreClasses.SeperateFileContent;
import Smells.BloatedCodes;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shane
 */



public class frmDetectBloatedCodes extends javax.swing.JFrame {

    /**
     * Creates new form frmDetectBloatedCodes
     */
    SeperateFileContent SFC = new SeperateFileContent();
    frmCodeSmellMenu CSM = new frmCodeSmellMenu();
    public Vector<Object> SFCBlocks=new Vector<Object>();
    public frmDetectBloatedCodes() {
        initComponents();
    }
    
    public frmDetectBloatedCodes(SeperateFileContent SFCTemp, frmCodeSmellMenu CSMemp, Vector SFCBlocksTemp) {
        
        SFC = SFCTemp;
        CSM = CSMemp;
        SFCBlocks = SFCBlocksTemp;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblShowLongMethodData = new javax.swing.JTable();
        cmbSmellList = new javax.swing.JComboBox();
        btnProcess = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodeVeiw = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lblSmellInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Detect Bloated Codes");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tblShowLongMethodData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblShowLongMethodData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblShowLongMethodDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblShowLongMethodData);

        cmbSmellList.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        cmbSmellList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Long Method", "Large Class", "Long Parameter List" }));

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel1.setText("Smell Type");

        txtCodeVeiw.setColumns(20);
        txtCodeVeiw.setRows(5);
        jScrollPane2.setViewportView(txtCodeVeiw);

        jLabel2.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel2.setText("Code View");

        jLabel3.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
        jLabel3.setText("Select a Smell To Detect");

        jLabel4.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("B l o a t e d    C o d e    D e t e c t o r");

        jLabel5.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        jLabel5.setText("Smell Details");

        jLabel6.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N
        jLabel6.setText("*Click on a Smell Detail to View the Code");

        lblSmellInfo.setEditable(false);
        lblSmellInfo.setColumns(20);
        lblSmellInfo.setRows(5);
        jScrollPane3.setViewportView(lblSmellInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(507, 507, 507))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(10, 10, 10)
                                    .addComponent(cmbSmellList, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addGap(58, 58, 58)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addComponent(cmbSmellList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
        CSM.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        
        String selectedSmell = cmbSmellList.getSelectedItem().toString();
        BloatedCodes BC = new BloatedCodes();
        //Long Method
//Large Class
//Long Parameter List
        
        if (selectedSmell.equals("Long Method"))
        {
            lblSmellInfo.setText("Shown below is a list of Long Methods taking 80 Lines as the \n average length of a method.");
            //DisplayTableData(BC.getLongMethods(SFC,SFCBlocks));
            DisplayTableData(BC.getLongMethods(SFCBlocks));
            
        }
        else if (selectedSmell.equals("Large Class"))
        {
            lblSmellInfo.setText("Shown below is a list of Large Class\nLOC = means the number lines of code\n" +
"NOC: means the number of component (method and attributes)\n" +
"\n" +
"Large Class = ((LOC>=700)|((LOC>=350)&(NOC>=20)))");
            //DisplayTableData(BC.getLargeClasses(SFC,SFCBlocks));
            DisplayTableData(BC.getLargeClasses(SFCBlocks));
            //getLargeClasses();
        }
        else if (selectedSmell.equals("Long Parameter List"))
        {
            lblSmellInfo.setText("Shown below is a list of Methods with Long Parameter List \n(Given a method m in a class C, the method has a Long Parameter List if:\n" +
"(((N>2)&(N>AVERAGE PARAMETERS+2))|(N>10))\n" +
"where:\n" +
"N = number of parameters of m\n" +
"M = number of methods in C\n" +
"AVERAGE_PARAMETERS = (∑ n° parameters of a method)/M, for all the methods in C.");
            //DisplayTableData(BC.getLongParameterLists(SFC,SFCBlocks));
            DisplayTableData(BC.getLongParameterLists(SFCBlocks));
           
        }
        
        
    }//GEN-LAST:event_btnProcessActionPerformed

    private void tblShowLongMethodDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblShowLongMethodDataMouseClicked
        // TODO add your handling code here:
        
        
                
        String selectedSmell = cmbSmellList.getSelectedItem().toString();
        BloatedCodes BC = new BloatedCodes();
        //Long Method
//Large Class
//Long Parameter List
        
        if (selectedSmell.equals("Long Method"))
        {
            String selectedRowMethodName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 0));
            String selectedRowFileName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 2));
            int selectedRowStartLine=Integer.parseInt(String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 4)));
            int StartLineNo=0;
            String MethName="";
            
            
             String fileName = selectedRowFileName;
           // String fileData="";
            for(int sf=0;sf<SFCBlocks.size();sf++)
            {
                if((((SeperateFileContent)SFCBlocks.elementAt(sf)).fileName).equals(fileName))
                {
                        
                        SeperateFileContent SFCTemp = (SeperateFileContent)SFCBlocks.elementAt(sf);
            
                        SFC = SFCTemp;
            
            
                        for(int m=0;m<SFC.MethodCodeBlocks.size();m++)
                        {
                            StartLineNo = ((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).startLineNo;
                            MethName = ((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).method_name;

                            if((MethName.equals(selectedRowMethodName))&((StartLineNo==selectedRowStartLine)))
                            {
                                txtCodeVeiw.setText(((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).content.toString());
                            }
                        }
                }
            }
            
        }
        else if (selectedSmell.equals("Large Class"))
        {
            String selectedRowClassName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 0));
            String selectedRowFileName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 2));
            int selectedRowStartLine=Integer.parseInt(String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 5)));
            int StartLineNo=0;
            String ClassName="";
            
            
             String fileName = selectedRowFileName;
           // String fileData="";
            for(int sf=0;sf<SFCBlocks.size();sf++)
            {
                if((((SeperateFileContent)SFCBlocks.elementAt(sf)).fileName).equals(fileName))
                {
                        
                        SeperateFileContent SFCTemp = (SeperateFileContent)SFCBlocks.elementAt(sf);
            
                        SFC = SFCTemp;
            
            
                        for(int m=0;m<SFC.ClassCodeBlocks.size();m++)
                       {
                           StartLineNo = ((ClassDefinition)SFC.ClassCodeBlocks.elementAt(m)).startLineNo;
                           ClassName = ((ClassDefinition)SFC.ClassCodeBlocks.elementAt(m)).class_name;

                           if((ClassName.equals(selectedRowClassName))&((StartLineNo==selectedRowStartLine)))
                           {
                               txtCodeVeiw.setText(((ClassDefinition)SFC.ClassCodeBlocks.elementAt(m)).content.toString());
                           }
                       }
                }
            }
            
        }
        else if (selectedSmell.equals("Long Parameter List"))
        {
            String selectedRowMethodName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 0));
            String selectedRowFileName=String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 2));
            int selectedRowStartLine=Integer.parseInt(String.valueOf(tblShowLongMethodData.getModel().getValueAt(tblShowLongMethodData.getSelectedRow(), 4)));
            int StartLineNo=0;
            String MethName="";
            
            
             String fileName = selectedRowFileName;
           // String fileData="";
            for(int sf=0;sf<SFCBlocks.size();sf++)
            {
                if((((SeperateFileContent)SFCBlocks.elementAt(sf)).fileName).equals(fileName))
                {
                        
                        SeperateFileContent SFCTemp = (SeperateFileContent)SFCBlocks.elementAt(sf);
            
                        SFC = SFCTemp;
            
            
                        for(int m=0;m<SFC.MethodCodeBlocks.size();m++)
                        {
                            StartLineNo = ((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).startLineNo;
                            MethName = ((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).method_name;

                            if((MethName.equals(selectedRowMethodName))&((StartLineNo==selectedRowStartLine)))
                            {
                                txtCodeVeiw.setText(((MethodDefinition)SFC.MethodCodeBlocks.elementAt(m)).content.toString());
                            }
                        }
                }
            }
           
        }
        
        
    }//GEN-LAST:event_tblShowLongMethodDataMouseClicked
    
    public void DisplayTableData(DefaultTableModel model)
    {
       tblShowLongMethodData.setModel(model);
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDetectBloatedCodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDetectBloatedCodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDetectBloatedCodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDetectBloatedCodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDetectBloatedCodes().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JComboBox cmbSmellList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea lblSmellInfo;
    private javax.swing.JTable tblShowLongMethodData;
    private javax.swing.JTextArea txtCodeVeiw;
    // End of variables declaration//GEN-END:variables
}
