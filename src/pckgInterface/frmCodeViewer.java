/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pckgInterface;

import CoreClasses.SeperateFileContent;

/**
 *
 * @author Shane
 */
public class frmCodeViewer extends javax.swing.JFrame {

    /**
     * Creates new form frmCodeViewer
     */
    
    SeperateFileContent SFC = new SeperateFileContent();
    frmFileDetails FD = new frmFileDetails();
    
    public frmCodeViewer() {
        initComponents();
    }
    public frmCodeViewer(SeperateFileContent SFCTemp, frmFileDetails FDTemp) {
        
        SFC = SFCTemp;
        FD = FDTemp;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGetCode = new javax.swing.JButton();
        cmdType = new javax.swing.JComboBox();
        cmdMethodList = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodeBlockPreview = new javax.swing.JTextArea();
        cmdSelectedDataList = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Code View");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        btnGetCode.setText("Get Code");
        btnGetCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetCodeActionPerformed(evt);
            }
        });

        cmdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Type", "Class", "Method", "For", "If", "While", "Repeat Until" }));
        cmdType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmdTypeItemStateChanged(evt);
            }
        });

        cmdMethodList.setEnabled(false);

        txtCodeBlockPreview.setColumns(20);
        txtCodeBlockPreview.setRows(5);
        jScrollPane2.setViewportView(txtCodeBlockPreview);

        cmdSelectedDataList.setEnabled(false);
        cmdSelectedDataList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdSelectedDataListMouseClicked(evt);
            }
        });
        cmdSelectedDataList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmdSelectedDataListItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("C o d e    V i e w e r");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmdSelectedDataList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdMethodList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnGetCode, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(cmdSelectedDataList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmdMethodList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetCode, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetCodeActionPerformed
        //        String methN = cmdMethodList.getSelectedItem().toString();
        //
        //        int mCount=0;
        //        //cmdMethodList.removeAllItems();
        //        txtAreaClassPreview.setText("");
        //        for(int i=0;i<SFC.MethodCodeBlocks.size();i++)
        //        {
            //            //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
            //
            //            if(SFC.getMethodDetails(i).method_name.toString().equals(methN))
            //            {
                //
                //
                //
                //                txtAreaClassPreview.setText(SFC.getMethodDetails(i).content.toString());
                //
                //
                //            }
            //
            //            //cmbClassList.addItem(SFC.getClassDetails(i).class_name.toString());
            //        }

        String sType = cmdType.getSelectedItem().toString();
        sType = sType.toLowerCase();

        if(sType.equals("class"))
        {
            displayCodeBlock("class");
        }
        else if(sType.equals("method"))
        {
            displayCodeBlock("method");
        }

    }//GEN-LAST:event_btnGetCodeActionPerformed

    private void cmdTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmdTypeItemStateChanged
        // TODO add your handling code here:

        String sItem = cmdType.getSelectedItem().toString();
        sItem = sItem.toLowerCase();

        cmdSelectedDataList.removeAllItems();

        if(sItem.toString().equals("select type"))
        {
            cmdSelectedDataList.setEnabled(false);
            //cmdMethodList.setEnabled(false);
        }
        else if (sItem.toString().equals("class"))
        {
            fillComboBox("class");
            cmdSelectedDataList.setEnabled(true);
            //cmdMethodList.setEnabled(false);
        }
        else if (sItem.toString().equals("method"))
        {
            fillComboBox("method");
            cmdSelectedDataList.setEnabled(true);
            //cmdMethodList.setEnabled(false);
        }
        else
        {
            cmdSelectedDataList.setEnabled(false);
            //cmdMethodList.setEnabled(false);
        }

    }//GEN-LAST:event_cmdTypeItemStateChanged

    
     public void displayCodeBlock(String Type)
    {
        switch (Type) {
            case "class":
                String classN = cmdSelectedDataList.getSelectedItem().toString();
                for(int i=0;i<SFC.ClassCodeBlocks.size();i++)
                {
                    //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
                    if(SFC.getClassDetails(i).class_name.toString().equals(classN))
                    {
                        txtCodeBlockPreview.setText(SFC.getClassDetails(i).content.toString());
                        
                        String[] tokens=SFC.getClassDetails(i).content.toString().split("\n"); 
                        
                        for (int ln=0;ln<tokens.length;ln++)
                        {   
                            
                        }
                    }
                }
                break;
            case "method":
                String methodN = cmdSelectedDataList.getSelectedItem().toString();
                for(int i=0;i<SFC.MethodCodeBlocks.size();i++)
                {
                    //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
                    if(SFC.getMethodDetails(i).method_name.toString().equals(methodN))
                    {
                        txtCodeBlockPreview.setText(SFC.getMethodDetails(i).content.toString());
                    }
                }
                break;
        }
    }
    
     public void fillComboBox(String Type)
    {
        switch (Type) {
            case "class":
                for(int i=0;i<SFC.ClassCodeBlocks.size();i++)
                {
                    //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
                    cmdSelectedDataList.addItem(SFC.getClassDetails(i).class_name.toString());
                }
                break;
            case "method":
                for(int i=0;i<SFC.MethodCodeBlocks.size();i++)
                {
                    //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
                    cmdSelectedDataList.addItem(SFC.getMethodDetails(i).method_name.toString());
                }
                break;
        }
    
    
    }
     
    private void cmdSelectedDataListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdSelectedDataListMouseClicked
        // TODO add your handling code here:

        //        String sItem = cmdMethodList.getSelectedItem().toString();
        //        sItem = sItem.toLowerCase();
        //
        //        if(!(sItem.toString().equals("select type")))
        //        {
            //            cmdMethodList.setEnabled(true);
            //        }
    }//GEN-LAST:event_cmdSelectedDataListMouseClicked

    private void cmdSelectedDataListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmdSelectedDataListItemStateChanged
        // TODO add your handling code here:

        //        String classN = cmdSelectedDataList.getSelectedItem().toString();
        //
        //        int mCount=0;
        //        cmdMethodList.removeAllItems();
        //        for(int i=0;i<SFC.ClassCodeBlocks.size();i++)
        //        {
            //            //ClassDefinition cdTemp = (ClassDefinition)SFC.getClassDetails(i);
            //
            //            if(SFC.getClassDetails(i).class_name.toString().equals(classN))
            //            {
                //                for(int m=0;m<(SFC.getClassDetails(i).method_names.size());m++)
                //                {
                    //                cmdMethodList.addItem(((MethodDefinition)SFC.getClassDetails(i).method_names.elementAt(mCount)).method_name);
                    //                 mCount++;
                    //                }
                //
                //            }
            //
            //            //cmbClassList.addItem(SFC.getClassDetails(i).class_name.toString());
            //        }

    }//GEN-LAST:event_cmdSelectedDataListItemStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        FD.setVisible(true);
        
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCodeViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCodeViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCodeViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCodeViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCodeViewer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetCode;
    private javax.swing.JComboBox cmdMethodList;
    private javax.swing.JComboBox cmdSelectedDataList;
    private javax.swing.JComboBox cmdType;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtCodeBlockPreview;
    // End of variables declaration//GEN-END:variables
}
